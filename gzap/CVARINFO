//// Automap/display configuration.

// When to show checks on the map.
// 0: never
// 1: only once you have the level map
// 2: always
server int ap_show_checks_on_map = 2;
// When to hilight progression checks with a different icon.
// 0: never, all checks look like filler until picked up
// 1: in person, all checks look like filler on the map
// 2: in person, and on map if you have the level map
// 3: always
server int ap_show_progression = 2;
// How to display traps.
// 0: all traps look like filler
// 1: all traps look like traps
// 2: all traps look like progression items  >:)
server int ap_show_traps = 0;

// How translucent to make checks once collected. A setting of 0 makes them
// disappear entirely. A setting of 1 means you can't tell if they've been
// collected or not. I find 0.2 to be a good value if you want to be able to
// see where they used to be.
user float ap_collected_alpha = 0;

// Whether to display the name of each check when you find it.
user bool ap_show_check_names = false;

// Whether to display icons for what's in each check.
// "original" shows you what used to be there, floating above the check.
// "contents" shows you what's in the check itself, if Doom has a sprite for it.
// You can safely turn on both at once.
server bool ap_show_check_original = false;
server bool ap_show_check_contents = true;

//// Gameplay configuration

//// Inventory configuration.
// How many of each thing the randomizer will bank. If you're at the limit and
// you receive more, they will be vended to you immediately.
// 0 means bank none, dispense immediately.
// -1 means no limit, save until requested.
server int ap_bank_weapons = 0;
server int ap_bank_ammo = 0;
server int ap_bank_armour = -1;
server int ap_bank_health = -1;
server int ap_bank_powerups = -1;
server int ap_bank_other = -1;
// Items to auto-vend when you get them.
// Space separated list of category or typename substrings.
server string ap_bank_custom = "small-*:0";

// Whether or not weapons can drop outside of the normal AP progression.
// 0 means no blocking of weapons
// 1 blocks weapons unless you already have a weapon in that slot
// 2 blocks weapons unless you already have a copy of that weapon
// 3 blocks weapons unconditionally
server int ap_suppress_weapon_drops = 1;

// Whether to auto-release all checks in the level when you finish it.
// Enum:
// 0 - off
// 1 - require all keys
// 2 - no special requirements
server int ap_enable_release_on_level_clear = 0;

// What checks to collect when ap_enable_release_on_level_clear is turned on.
// Bitmask:
// 1 - collect non-secret checks
// 2 - collect secret checks
// In multiworld games this can emit a lot of check messages!
server int ap_release_on_level_clear = 3;

// Deathlink enable bit.
server bool ap_enable_deathlink = false;

//// Scanner configuration.
// These are not written to the save file or config file, since they're more
// like commands than settings. They can, however, be given wad-specific default
// values in a GZAPRC lump.
//
// For wads without defaults, you can usually do something like this:
//    ] ap_scan_levels "MAP01"
//    ] netevent ap-scan:start
// and it'll scan the entire wad. If it's broken into episodes, like Doom 1, you
// might instead need something like:
//    ] ap_scan_levels "E1M1 E2M1 E3M1 E4M1"
//    ] netevent ap-scan:start
// If this is one of those wads where, e.g., there are five levels but they
// continue on into the Doom 2 levels after the last one, you probably want to
// turn off recursion:
//    ] ap_scan_recurse false
//    ] ap_scan_levels "MAP01 MAP02 MAP03 MAP04 MAP05"
//    ] netevent ap-scan:start

// List of levels to scan. If ap_scan_recurse is set, these levels and all
// levels reachable from them will be scanned. Otherwise, only these levels
// exactly will be. Space-separated.
nosave noarchive string ap_scan_levels = "";
// List of levels to include in scan but skip in output. As above, space-separated.
nosave noarchive string ap_scan_skip = "";
// List of levels to not even scan.
nosave noarchive string ap_scan_prune = "";
// If false, only levels listed in ap_scan_levels will be scanned. If true, any
// level reachable by exits from those levels will be as well, recursively.
// Caveats:
// - level transitions using zscript or ACS are not detected, nor are normal
//   exits or levelports that start inactive and are activated later via scripts
// - levels listed in NextSecretMap are considered reachable even if there is
//   no secret exit in the level itself
nosave noarchive bool ap_scan_recurse = true;

// If true, scanning a map adds all other maps in the same cluster to the queue.
// This is mainly useful for wads with scripted levelports where ap_scan_recurse
// cannot find them but they share clusters with other maps that it can find.
nosave noarchive bool ap_scan_clusters = false;

// Mark one or more checks unreachable.
// If set to 1, the next check you collect will be flagged.
// If set to 2, all checks you collect until the level exit will be flagged,
// and additionally, exiting the level will collect all remaining checks in it.
// In either case the cvar will subsequently be reset to 0.
nosave noarchive int ap_scan_unreachable = 0;
