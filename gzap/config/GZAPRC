# gzArchipelago run control file.
# This overrides the behaviour of the scanner and check-placer based on actor
# types.
#
# Available directives are:
#
#
#     require <map> <checksum> ;
#
# This GZAPRC will be loaded only if the given map is present, and has the given
# checksum. This can be used to make GZAPRCs specific to a certain megawad load
# only if that megawad is also loaded.
# You can specify multiple require lines, in which case the GZAPRC will be loaded
# if any of them match.
#
#
#     category <cat> : <list of classes> ;
#
# Assign the listed classes to the given category. Any category can be specified,
# including ones not otherwise known to the scanner -- they will be passed through
# to the apworld as is. This can be used to add objects to the scan that would
# normally be skipped, or change the category of objects.
#
# "key", "map", and "weapon" have special handling in the generator:
# - keys are used in reachability calculations and are, by default, limited to
#   the level on which they're found (although the logic can indicate that a
#   key can be carried between levels)
# - weapons are used for difficulty-based logic, via the weapon_*_bias options;
#   there is also a limit on how many copies of each weapon can be in the pool
# - maps are converted into checks, but not placed in the item pool; instead the
#   pool is populated (or not) with maps based on other settings
#
# A category of "none" will exclude something from the scan entirely, even if it
# would normally have been included.
#
#
#     typename <type> : <list of classes> ;
#
# When scanning anything in the list, report it as being <type> rather than
# whatever its actual type is. The check will be named after that type rather
# than whatever was actually scanned, and the given type, not the original item,
# will be added to the item pool.
#
#
#     scanner {
#       maps = list of maps to start scanning at;
#       skip = list of maps to skip;
#       prune = list of maps to prune;
#       recurse = true|false;
#       clusters = true|false;
#     }
#
# Set defaults for the scanner.
# These are the same as the ap_scan_* CVARs without the ap_scan_ prefix.

#### General Doom/Heretic/Chex item categories ####
# GZAP has built in heuristics for item categorization: health and armour is
# considered "big" if it restores at least 100, "medium" if it restores at least
# 25 points, and "small" otherwise.
# Ammo is categorized similarly, except it's based on what % of your total ammo
# capacity is refilled, with backpacks considered "big" and anything that restores
# at least 20% of your capacity "medium".
# Unfortunately, there's no way to set that cutoff that properly categorizes
# everything in Doom or Heretic. So while the heuristics remain to support TCs,
# we use manual categorization for the Id games.
category small-ammo:
  Cell Clip RocketAmmo Shell
  BlasterAmmo CrossbowAmmo GoldWandAmmo MaceAmmo PhoenixRodAmmo SkullRodAmmo
  LargeZorchRecharge MiniZorchRecharge PhasingZorch PropulsorZorch;

category medium-ammo:
  CellPack ClipBox RocketBox ShellBox
  BlasterHefty CrossbowHefty GoldWandHefty MaceHefty PhoenixRodHefty SkullRodHefty
  LargeZorchPack MiniZorchPack PhasingZorchPack PropulsorZorchPack;

# These use CustomInventory to implement special handling and thus can't be
# auto-categorized.
category big-armor-health: Megasphere;
category powerup-health: Berserk;

#### Heretic configuration ####
# In Heretic, the Firemace is actually placed on the map as a MaceSpawner. When
# playing, there is a random chance for the Firemace to appear at each spawner.
# For rando purposes, we want to replace each spawner with a check, whether or
# not it got replaced when the scanner saw it.
# TODO: we might want to make this conditional in the same way BONSAIRC blocks
# are, so that the builtin RC can have different settings for different TCs?

# When scanning, consider MaceSpawners to be weapons rather than skipping them.
category weapon: MaceSpawner;

# When adding them to the pool, add Mace rather than MaceSpawner, and name the
# check based on Mace's tag rather than MaceSpawner's tag. This ensures that
# when the player finds one, they get an actual Firemace, rather than a spawner
# that might just do nothing when given to them.
typename Mace: MaceSpawner;

# Ignore any Maces that spawn entirely. They will neither be converted to checks
# nor added to the item pool.
category none: Mace;

# Also ignore the Wings of Wrath since they are often needed for level
# progression and the logic doesn't presently understand that.
category none: ArtiFly;
