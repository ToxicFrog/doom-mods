# Roadmap

## gzArchipelago

To release a new version:
- update the version number in the CHANGELOG and Makefile
- make
- commit
- tag and push the commit
- make again to bake the release version number into the pk3
- cut the release on github

### next release

(0.7 is focusing on logic/tuning format changes and bugfixes)
- fix filler pool population for :vanilla categories
- logic engine changes to acommodate hubclusters
  - generate exit nodes per cluster rather than per map
  - trigger exit when leaving the cluster via non-level-select, non-loadgame means
  - associate a region with each map and allow configuring it with AP-REGION
    - map access requires access key + other region requirements
    - DoomRegion implicitly wants an enclosing map so we probably want to inherit from DoomReachable in DoomMap
  - keep track of which locations are in which regions
    - rework create_regions to use this info
    - use it for weapon logic
- UI changes: drop the visited-levels thing. Either keep a list of all previous
  regions and let the player select regions, keys, and weapons, or just have a
  textbox.

(maybe wait for 0.7.1)
- weapon ownership rework
- display weapons in inventory even if you don't have them
- let you hint weapons from the inventory screen
- hints section in the inventory screen for hints pointing to the current level

### general notes on scanner/logic changes

This is mostly based on what needs to change to support Faithless, but it'll help
a bunch of other games as well.

We need to support logic dependencies on things other than keys. This is trickier.
At the moment the keyset implicitly means "these keys scoped to the enclosing level".
We probably need to promote scoped keys to their fully qualified names when generating
the keyset, and do the same when processing tuning files. It's probably ok if we
don't include weapons in tuning for now, but we should be able to express them
in the logic file.

We need event support. We need, for example, to be able to say that Faithless
E1M4 and E1M5 aren't in logic until you can trigger the Garden Portal Activated
event in the gardens, or that E1M1 Under Belltower isn't in logic until after you
flip the switch for the portcullis (in addition to having the green key). This is
something that apdoom has an easier time representing because it has subregions
for its levels. This also means that we need a way to refer to events from AP-ITEM/
AP-CHECK logic.

Adventures of Square would benefit from being able to model weapons that are also
keys; frozen notes that the Hellshell Launcher can be used to break certain walls
that normally require TNT box manipulation. This also ties in with the need to
be able to represent logic requirements that aren't just keys.

### scanner

- list maps to scan as ranges or globbing expressions?

### generator

- option to treat bosses as checks -- also needs scanner changes, highly vulnerable
  to enemy-replacement mods
  - could try placing the check in the boss's inventory, and on the ground where
    the boss would be if we can't find it
- alternate win conditions:
  - find N victory tokens
  - find N secrets
- option to choose the X% of an item category game-wide rather than per-map
- item tag support, allowing to treat "small", "health", and "secret" (e.g.) as
  separate tags -- need to figure out how the YAML works for this

### ingame

- TT has a bunch of stuff that breaks it: single-use teleport lines, scripts that
  take away your guns and keys on level start
  - we can probably be better about keeping the player's key inventory up to
    date, at least.
  - can we do anything about weapons? remember how many the player has been
    vended and re-vend them if they run out?

- "gzap for apdoom users" man page
- some hints received when playing in the weekly sync did not display on the
  map screen
- Ashes 2063 reports duplicate keys because of the way keys are handled -- you
  pick up the BluePassCard and it gives you a BlueCard in your inventory, which
  the AP runtime then identifies as a new key scoped to that level, which can be
  a bit confusing but generally does not affect normal play.

### Faithless



### Golden Souls

Basic structure is one central hub map from which all other maps branch off. Access
to these maps is gated based on number of Golden Souls or Big Coins found, with
only map accessible initially.

Each map contains weapons, ammo, health, small coins, enemies (which drop small coins),
and one or more Golden Souls and Big Coins. Some levels contain red coins and all
red coins must be collected to reveal the GS.

For this we probably want to abandon access tokens entirely, or model them as-well-as
golden souls. This means we also need a way to say "the requirements for entering
map X are Y". It already has full persistence and a hub, so we don't need the
generated MAPINFO or even, probably, the level select screen.

Internally, we have a bunch of inventory items:
Star_Soul - golden soul
Big_Coin_Total, Big_Coin - incremented when you find a BC
BigCoinsInMap - you get one of these when in a map that has BCs
Token_BigCoinCounter - map-specific, gain one for each big coin
RedCoinsInMap, Token_RedCoinCounter - as above but for red coins

Initially progress is completely linear, with one level == one soul, and the next
level needing N+1 souls to access. As you find secret levels and big coins, though,
you can get ahead of the soul curve; secret levels contain one soul and no big coins.

There are three secret levels that must be found via exits in other maps, and three
more that require 12, 24, or 36 big coins to reach.

At 8 souls, you unlock 4 more levels all at once.

To reach the final boss, you need 15 souls; since there are only 12 "normal" levels,
you also need to do at least three of the (secret hidden + secret bigcoin) levels.
