# gzArchipelago run control file.
# This overrides the behaviour of the scanner and check-placer based on actor
# types.
#
# Available directives are:
#
#     category <cat> : <list of classes> ;
# Assign the listed classes to the given category. Any category can be specified,
# including ones not otherwise known to the scanner -- they will be passed through
# to the apworld as is. This can be used to add objects to the scan that would
# normally be skipped, or change the category of objects.
#
# "key", "map", and "weapon" have special handling in the generator:
# - keys are used in reachability calculations and are, by default, limited to
#   the level on which they're found (although the logic can indicate that a
#   key can be carried between levels)
# - weapons are used for difficulty-based logic, via the weapon_*_bias options;
#   there is also a limit on how many copies of each weapon can be in the pool
# - maps are converted into checks, but not placed in the item pool; instead the
#   pool is populated (or not) with maps based on other settings
#
# A category of "none" will exclude something from the scan entirely, even if it
# would normally have been included.
#
#     typename <type> : <list of classes> ;
# When scanning anything in the list, report it as being <type> rather than
# whatever its actual type is. The check will be named after that type rather
# than whatever was actually scanned, and the given type, not the original item,
# will be added to the item pool.

#### General Doom/Heretic item categories ####
# GZAP has built in heuristics for item categorization: health and armour is
# considered "big" if it restores at least 100, "medium" if it restores at least
# 25 points, and "small" otherwise.
# Ammo is categorized similarly, except it's based on what % of your total ammo
# capacity is refilled, with backpacks considered "big" and anything that restores
# at least 20% of your capacity "medium".
# Unfortunately, there's no way to set that cutoff that properly categorizes
# everything in Doom or Heretic. So while the heuristics remain to support TCs,
# we use manual categorization for the Id games.
category small-ammo:
  Cell Clip RocketAmmo Shell
  BlasterAmmo CrossbowAmmo GoldWandAmmo MaceAmmo PhoenixRodAmmo SkullRodAmmo
  LargeZorchRecharge MiniZorchRecharge PhasingZorch PropulsorZorch;

category medium-ammo:
  CellPack ClipBox RocketBox ShellBox
  BlasterHefty CrossbowHefty GoldWandHefty MaceHefty PhoenixRodHefty SkullRodHefty
  LargeZorchPack MiniZorchPack PhasingZorchPack PropulsorZorchPack;

# These use CustomInventory to implement special handling and thus can't be
# auto-categorized.
category big-armor: Megasphere;
category powerup: Berserk;

#### Heretic configuration ####
# In Heretic, the Firemace is actually placed on the map as a MaceSpawner. When
# playing, there is a random chance for the Firemace to appear at each spawner.
# For rando purposes, we want to replace each spawner with a check, whether or
# not it got replaced when the scanner saw it.
# TODO: we might want to make this conditional in the same way BONSAIRC blocks
# are, so that the builtin RC can have different settings for different TCs?

# When scanning, consider MaceSpawners to be weapons rather than skipping them.
category weapon: MaceSpawner;

# When adding them to the pool, add Mace rather than MaceSpawner, and name the
# check based on Mace's tag rather than MaceSpawner's tag. This ensures that
# when the player finds one, they get an actual Firemace, rather than a spawner
# that might just do nothing when given to them.
typename Mace: MaceSpawner;

# Ignore any Maces that spawn entirely. They will neither be converted to checks
# nor added to the item pool.
category none: Mace;


#### Adventures of Square configuration ####
# AOS uses CustomInventory objects to implement the weapon pickups, which when
# picked up place both the weapon and a "voiceover" object into the player's
# inventory.
# The "FooVO" is the object actually placed in the world; it turns into a
# "Foo" and a "SquareVOWeaponsFoo".
category weapon:
  DefibrillatorVO PaintGunVO PaintGunsVO OoziVO OozisVO ShotbowVO
  QuadcannonVO PaintCannonVO HellShellLauncherVO GoonadesVO SceptreVO;

# SillySphere is basically the equivalent of Megasphere
category big-armor: SillySphere;

# Powerups that are implemented as CustomInventory
category powerup: HolySphere HotSauce Locationator;

# Fishtank spawners are needed for progression in some levels and shouldn't be
# replaced. Same deal with EnviroSpawners.
category none: FishTankSpawner EnviroSpawner;


#### Space Cats Saga ####
# The various SpaceCat actors are secrets, and spawn something else when found
# and petted.
# N.b. the weapon spawns (SC3 and SC4) may turn into ammo instead on some levels,
# not sure why. And of course even if they do turn into weapons, they are replaced
# by the SCS weapons, not the BFG/Plasma.
#
# This can currently be expressed in a mechanically correct manner with the category
# and typename directives, so that e.g. SpaceCatKirie, when scanned, is categorized
# as big-armor and placed into the item pool as BlueArmor.
# They can also just be left alone as a small, non-randomized bonus for the player.
# Ideally, I would like them to be entered into the item pool as themselves, so
# that you find a "SpaceCatTiger" in a chest somewhere, and then the receiving
# player can spawn it in and pet it for a powerup. And this works fine for most
# of them, but the weapon ones, specifically, may count as a weapon.
#
# Except that, since sometimes they *don't* spawn a weapon, we can't rely on this...
#
# We need changes to the GZAP and maybe even to the logic format to support that
# general idea ("treat this item as itself but for the purposes of logic treat it
# as something else"), which might also help with things like the Ashes keys that
# turn into vanilla keys/skulls when picked up, but for now we just pretend that
# they are ammo.

# Soulsphere kitties
category big-health: SpaceCatUse SpaceCatSee;

# Megasphere and BlueArmor kitties
category big-armor: SpaceCatHero SpaceCatFlower SpaceCat6 SpaceCat7 SpaceCatTiger SpaceCatChauff;
category big-armor: SpaceCat2 SpaceCatKirie;

# Berserk kitty
category powerup: SpaceCat5;

# Weapon/ammo kitties; nominally plasma and BFG but usually turns into energy cells instead.
category big-ammo: SpaceCat3 SpaceCat4;


#### Ashes 2063 configuration ####
# Ashes does something weird here where it has a bunch of custom keys, but under
# the hood it uses the normal skull/keycard actors -- each key is a CustomInventory
# that when picked up gives you the corresponding vanilla key!
# This works, but also causes some confusing UI stuff at runtime because it results
# in AP picking up the originals as additional keys -- so e.g. MAP01, which has
# the BluePassCard, will give you a BlueCard once you pick it up, which will in
# turn result in it identifying that map as having both a BlueCard and a BluePassCard
# and you as having both of them. Which works, but is untidy.
# Using typename to replace them with the underlying keycards or skulls avoids this,
# but at the cost of them no longer lining up with what the in-level messages say
# and so forth.
# Ideally we'd want some way of saying "treat a BlueCard in the player's inventory
# like a BluePassCard in the AP inventory, and vice versa", or something.
category key:
  BluePassCard RedPassCard YellowPassCard
  AshesSilverKey AshesBronzeKey AshesGoldKey;

# Weapon handling
# shotguns are handled via PumpySpawn, which gives the player pumpaction normally,
# but if they have pumpaction2 (the upgraded PAS) it gives them ammo instead.
# The upgrade is handled normally by giving the player PumpgunBuild2, which, when
# picked up, removes the pumpaction and grants the pumpaction2.
# The SMG is handled similarly: IngramSpawn is the in-world object, which gives
# you Ingram if you have no SMG, or 9mm ammo if you do.
# Ingram2 and Ingram3 are the upgraded versions.
# IngramBuild2 and IngramBuild3 each take away the other two versions and give you
# the 2/3 versions (2 is suppressed, 3 is suppressed + accuracy IIRC?)
# For this to work right we probably want progressive weapon support, or something --
# the first shotgun they find grants pumpaction, second takes that away and grants
# pumpaction2 or pumpgunbuild2?

# So how do I want progressive things to work?
# It needs to be in the GZAPRC, not the logic, because it has to be available
# at runtime.
# But the logic also needs to know at least some things about it to spawn enough --
# e.g. we need at least three Progressive Ingrams in the pool even if number-of-weapons
# is set to a lower value.
#category weapon: PumpySpawn;
# progressive PumpySpawn: pumpaction pumpaction2;

#category weapon: IngramSpawn;
# progressive IngramSpawn: Ingram Ingram2 Ingram3;

# Pipebombs are formally weapons, but since each one in the game just gives you
# one to throw -- i.e. the weapon is also the ammo -- we map them as big-ammo
# instead.
#category big-ammo: pipebomb;

# In normal play -- you get the pumpaction2 by talking to Fortune, accepting her
# bet, then beating her in a race to the bottom of DAM1
# you get the ingram2 (silenced) in Dead Man Walking, by talking to the bunker
# QM in MAP52 and buying a silencer
# you get the ingram3 (fully upgraded) in MAP06, Michonne Circle, by delivering
# the briefcase to Rigs and then choosing "you make weapons?" when he offers you
# a reward (and by having the ingram in your inventory).

# There's also various quest items which are autocategorized as "tools" and should
# instead be categorized as cross-level quest items.
# Some of these are given by ACS and not available to the scanner.
# Handling those properly likely requires the same sort of event support in the
# logic file that Faithless wants.
#category key: QuestRadio QuestJerryCan;